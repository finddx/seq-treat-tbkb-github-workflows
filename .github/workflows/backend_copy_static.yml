name: Reusable workflow for deploying the ECS backend static files

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      role-name:
        required: true
        type: string
  
    secrets:
      AWS_ACCOUNT_ID:
        required: true
       
jobs:
  collect_static_backend:
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    env:
      STATIC_ROOT: "static/"
      SECRET_KEY: "DUMMYSECRETKEYVALUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install dependencies pip
        run: pip install --no-cache-dir --upgrade pip pipenv
      - name: Install dep pipenv
        run: pipenv install --system --dev --deploy
      - name: Collect static
        run: python manage.py collectstatic --noinput --clear
      - name: Upload static files artifact
        uses: actions/upload-artifact@v3
        with:
          name: static
          path: static/

  copy_backend_static_files:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    needs: collect_static_backend
    container:
      image: amazon/aws-cli:latest
    env:
      STATIC_ROOT: "static/"
      AWS_STORAGE_BUCKET_NAME: "${{vars.PROJECT_NAME}}-main-${{vars.ENV_NAME}}-django-static-files"
      PROJECT_NAME: ${{vars.PROJECT_NAME}}
      ENV_NAME: ${{vars.ENV_NAME}}
    steps:
      - name: Download static files artifact
        uses: actions/download-artifact@v3
        with: 
          name: static
          path: static/
      - name: Configure AWS credentials from Test account
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{inputs.role-name}}
          aws-region: ${{vars.AWS_REGION}}
          mask-aws-account-id: true
      - name: Upload to S3
        run: | 
          aws s3 rm --recursive s3://${AWS_STORAGE_BUCKET_NAME}
          aws s3 cp ${STATIC_ROOT} s3://${AWS_STORAGE_BUCKET_NAME}/static_files/ --recursive --include "*"
          CDN_DISTRIBUTION_ID=$(aws resourcegroupstaggingapi get-resources --tag-filters Key=Environment,Values=${{vars.ENV_NAME}} --resource-type-filters 'cloudfront' --tags-per-page 100 --region us-east-1  --query "ResourceTagMappingList[0].ResourceARN" | sed 's:.*/::' | tr -d '"')
          INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${CDN_DISTRIBUTION_ID} --paths "/static_files/*"  --output text --query 'Invalidation.Id')
          aws cloudfront wait invalidation-completed --distribution-id ${CDN_DISTRIBUTION_ID} --id ${INVALIDATION_ID}
      