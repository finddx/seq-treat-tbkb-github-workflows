name: Reusable workflow for deploying the ECS backend static files

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string  
    secrets:
      AWS_ACCOUNT_ID:
        required: true
       
jobs:
  collect_static_backend:
    runs-on: ubuntu-latest
    container:
      image: python:3.10
    env:
      STATIC_ROOT: "static/"
      SECRET_KEY: "DUMMYSECRETKEYVALUE"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Install dependencies pip
        run: pip install --no-cache-dir --upgrade pip pipenv
      - name: Install dep pipenv
        run: pipenv install --system --dev --deploy
      - name: Collect static
        run: python manage.py collectstatic --noinput --clear
      - name: Upload static files artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.environment}}-static
          path: static/

  copy_backend_static_files:
    runs-on: ubuntu-latest
    environment: ${{inputs.environment}}
    needs: collect_static_backend
    env:
      STATIC_ROOT: "static/"
    steps:
      - name: Download static files artifact
        uses: actions/download-artifact@v4
        with: 
          name: ${{inputs.environment}}-static
          path: static/
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{vars.PROJECT_NAME}}-main-${{inputs.environment}}-my-github-actions-backend
          aws-region: ${{vars.AWS_REGION}}
          mask-aws-account-id: true
      - name: Get bucket name via tags
        id: bucket
        run: |
          echo "BUCKET=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=Usage,Values=django-static-files Key=Environment,Values=${{inputs.environment}} \
            --resource-type-filters 's3:bucket' \
            --region ${{vars.AWS_REGION}} \
            --query 'ResourceTagMappingList[0].ResourceARN' \
            --output text | sed 's/.*://')" \
            >> "$GITHUB_OUTPUT"
      - name: Get distribution ID
        id: distribution
        run: |
          echo "DISTRIBUTION=$(aws resourcegroupstaggingapi get-resources \
            --tag-filters Key=Environment,Values=${{inputs.environment}} \
            --resource-type-filters 'cloudfront' \
            --region us-east-1  \
            --query 'ResourceTagMappingList[0].ResourceARN' \
            --output text | sed 's:.*/::')" \
            >> "$GITHUB_OUTPUT"
      - name: Clean up bucket and copy files
        env:
           BUCKET: ${{steps.bucket.outputs.BUCKET}}
        run: |
          aws s3 rm --recursive s3://${BUCKET}
          aws s3 cp ${STATIC_ROOT} s3://${BUCKET}/static_files/ --recursive --include "*"
      - name: Invalidate Cloudfront distribution
        env:
          DISTRIBUTION: ${{steps.distribution.outputs.DISTRIBUTION}}        
        run: | 
          INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION} --paths "/static_files/*"  --output text --query 'Invalidation.Id')
          aws cloudfront wait invalidation-completed --distribution-id ${DISTRIBUTION} --id ${INVALIDATION_ID}
