name: Reusable workflow for building and deploying front-end

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      runner:
        required: true
        type: string
    secrets:
      AWS_ACCOUNT_ID:
        required: true
     
jobs:
  build_static:
    runs-on: ${{inputs.runner}}
    container:
      image: node:17.4.0
    defaults:
      run:
        shell: bash
    environment: ${{inputs.environment}}
    env:
      CI: false
      REACT_APP_NODE_ENV: ${{vars.REACT_APP_NODE_ENV}}
      REACT_APP_SERVER_ENDPOINT: "${{vars.ENV_URL}}/api/v1/"
      REACT_APP_ENTRA_TENANT: "${{vars.REACT_APP_ENTRA_TENANT}}"
      REACT_APP_EMAIL_CONTACT: "${{vars.REACT_APP_EMAIL_CONTACT}}"
      REACT_APP_MSAL_REDIRECT_URI: "${{vars.ENV_URL}}/overview"
      REACT_APP_MSAL_AUTHORITY: ${{vars.REACT_APP_MSAL_AUTHORITY}}
      REACT_APP_MSAL_CLIENT_ID: ${{vars.REACT_APP_MSAL_CLIENT_ID}}
      REACT_APP_MSAL_SCOPES: ${{vars.REACT_APP_MSAL_SCOPES}}
      REACT_APP_GTM_ID: ${{vars.REACT_APP_GTM_ID}}
      REACT_APP_ENV_HEADER_NAME: ${{vars.REACT_APP_ENV_HEADER_NAME}}
      HUSKY: 0
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Build static files
        run: |
          npm install
          npm run build
      - name: Check build success
        run: |
          ERR_CODE=$(ls build/ | grep -c "index.html") || true
          if [ $ERR_CODE -eq 0 ];
          then
            echo "Can not find index.html in build result" && exit 1;
          else
            echo "Building static files has been finished!";
          fi;
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{inputs.environment}}-static-build
          path: build/

  deploy_static:
    needs: build_static
    environment: ${{inputs.environment}}
    runs-on: ${{inputs.runner}}
    defaults:
      run:
        shell: bash
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with: 
          name: ${{inputs.environment}}-static-build
          path: build/
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{secrets.AWS_ACCOUNT_ID}}:role/${{vars.PROJECT_NAME}}-main-${{inputs.environment}}-my-github-actions-frontend
          aws-region: ${{vars.AWS_REGION}}
          mask-aws-account-id: true
      - name: Get bucket ARN via tags
        uses: finddx/get-aws-resource-by-tag@v1
        id: bucket
        with:
          tag_filters: "--tag-filters Key=Usage,Values=static-files Key=Environment,Values=${{inputs.environment}}"
          resource_type: "s3:bucket"
          aws_region: ${{vars.AWS_REGION}}
      - name: Get CF distribution ARN via tags
        uses: finddx/get-aws-resource-by-tag@v1
        id: distribution
        with:
          tag_filters: "--tag-filters Key=Environment,Values=${{inputs.environment}}"
          resource_type: "cloudfront"
          aws_region: "us-east-1"
      - name: Clean up bucket and copy new files
        env: 
          BUCKET_FULL_ARN: ${{steps.bucket.outputs.resource_id}}
        run: |
          bucket_name=$(echo ${BUCKET_FULL_ARN} | sed "s/.*://")
          aws s3 rm --recursive s3://${bucket_name}
          aws s3 cp build/ s3://${bucket_name} --recursive --include "*"
      - name: Invalidate Cloudfront distribution
        env: 
          BUCKET_FULL_ARN: ${{steps.bucket.outputs.resource_id}}
          DISTRIBUTION_FULL_ARN: ${{steps.distribution.outputs.resource_id}}        
        run: |
          bucket_name=$(echo ${BUCKET_FULL_ARN} | sed "s/.*://")
          distribution_id=$(echo ${DISTRIBUTION_FULL_ARN} | sed 's|.*/||')
          for i in $(aws s3api list-objects-v2 --bucket ${bucket_name}  --query "Contents[?!(contains(Key, 'static/'))].Key" --output text)
          do
            aws cloudfront create-invalidation --distribution-id ${distribution_id} --paths "/${i}"  --output text --query 'Invalidation.Id';
          done
          INVALIDATION_ID=$(aws cloudfront create-invalidation --distribution-id ${distribution_id} --paths "/static/*"  --output text --query 'Invalidation.Id')
          aws cloudfront wait invalidation-completed --distribution-id ${distribution_id} --id ${INVALIDATION_ID}